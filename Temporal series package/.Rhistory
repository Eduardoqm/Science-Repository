###############################################
#          TEMPORAL SERIES PACKAGE            #
#          => A Temporal scale <==            #
# By: Eduardo Q Marques   10-02-2020          #
###############################################
#This script is for construction and test my oun package to work with temporal series and satelitte images
library(raster)
library(rgdal)
library(ggplot2)
library(reshape2)
library(dplyr)
library(tidyr)
library(viridis)
#Data bank to test======================================================================
ndvi <- stack(list.files(path="C:/Users/Eduardo Q Marques/Documents/My Jobs/Programas/R/Science-Repository/Temporal series package/NDVI", pattern = ".tif$", full.names=TRUE,recursive=TRUE))
#Polygon to get values
polygons <-readOGR(dsn = "C:/Users/Eduardo Q Marques/Documents/My Jobs/Programas/R/Science-Repository/Temporal series package",layer="polygons")
polygon <-readOGR(dsn = "C:/Users/Eduardo Q Marques/Documents/My Jobs/Programas/R/Science-Repository/Temporal series package",layer="polygon")
points <-readOGR(dsn = "C:/Users/Eduardo Q Marques/Documents/My Jobs/Programas/R/Science-Repository/Temporal series package",layer="points")
point <-readOGR(dsn = "C:/Users/Eduardo Q Marques/Documents/My Jobs/Programas/R/Science-Repository/Temporal series package",layer="point")
lines <-readOGR(dsn = "C:/Users/Eduardo Q Marques/Documents/My Jobs/Programas/R/Science-Repository/Temporal series package",layer="lines")
line <-readOGR(dsn = "C:/Users/Eduardo Q Marques/Documents/My Jobs/Programas/R/Science-Repository/Temporal series package",layer="line")
polygons = spTransform(polygons, crs(ndvi))
polygon = spTransform(polygon, crs(ndvi))
points = spTransform(points, crs(ndvi))
point = spTransform(point, crs(ndvi))
lines = spTransform(lines, crs(ndvi))
line = spTransform(line, crs(ndvi))
###############################################
#       TEMPORAL SERIES PACKAGE (Tests)       #
#          => A Temporal scale <==            #
# By: Eduardo Q Marques   12-02-2020          #
###############################################
#This script is for construction and test my oun package to work with temporal series and satelitte images
library(raster)
library(rgdal)
#Data bank to test======================================================================
ndvi <- stack(list.files(path="C:/Users/Eduardo Q Marques/Documents/My Jobs/Programas/R/Science-Repository/Temporal series package/NDVI", pattern = ".tif$", full.names=TRUE,recursive=TRUE))
#Polygon to get values
polygons <-readOGR(dsn = "C:/Users/Eduardo Q Marques/Documents/My Jobs/Programas/R/Science-Repository/Temporal series package",layer="polygons")
polygon <-readOGR(dsn = "C:/Users/Eduardo Q Marques/Documents/My Jobs/Programas/R/Science-Repository/Temporal series package",layer="polygon")
points <-readOGR(dsn = "C:/Users/Eduardo Q Marques/Documents/My Jobs/Programas/R/Science-Repository/Temporal series package",layer="points")
point <-readOGR(dsn = "C:/Users/Eduardo Q Marques/Documents/My Jobs/Programas/R/Science-Repository/Temporal series package",layer="point")
lines <-readOGR(dsn = "C:/Users/Eduardo Q Marques/Documents/My Jobs/Programas/R/Science-Repository/Temporal series package",layer="lines")
line <-readOGR(dsn = "C:/Users/Eduardo Q Marques/Documents/My Jobs/Programas/R/Science-Repository/Temporal series package",layer="line")
polygons = spTransform(polygons, crs(ndvi))
polygon = spTransform(polygon, crs(ndvi))
points = spTransform(points, crs(ndvi))
point = spTransform(point, crs(ndvi))
lines = spTransform(lines, crs(ndvi))
line = spTransform(line, crs(ndvi))
plot(ndvi)
plot(ndvi[[10]])
plot(polygon, add = T)
plot(polygons, add = T)
plot(point, add = T)
plot(points, add = T)
plot(line, add = T)
plot(lines, add = T)
plot(ndvi)
plot(ndvi[[10]])
plot(line, add = T)
plot(lines, add = T)
plot(polygons, add = T)
###############################################
#          TEMPORAL SERIES PACKAGE            #
#          => A Temporal scale <==            #
# By: Eduardo Q Marques   10-02-2020          #
###############################################
#This script is for construction and test my oun package to work with temporal series and satelitte images
#Packages requiries ====================================================================
library(raster)
library(rgdal)
library(ggplot2)
library(reshape2)
library(dplyr)
library(tidyr)
library(viridis)
#Functions =============================================================================
#Extract point temporal data (x is raster, y is point file)
time_point = function(x,y){
ext <- raster::extract(x, y)
#a <- melt(ext)
}
#Tests ===================================================================================
#Points test
df_point = time_point(ndvi, point)
View(df_point)
#Tests ===================================================================================
#Points test
df_point = time_point(ndvi, point)
View(df_point)
View(df_point)
#Extract point temporal data (x is raster, y is point file)
time_point = function(x,y){
ext <- raster::extract(x, y)
a <- melt(ext)
}
#Tests ===================================================================================
#Points test
df_point = time_point(ndvi, point)
View(df_point)
time_point = function(x,y){
ext <- raster::extract(x, y)
ext <- melt(ext)
colnames(ext) <- c("id", "time","value")
}
#Tests ===================================================================================
#Points test
df_point = time_point(ndvi, point)
View(df_point)
time_point = function(x,y){
ext <- raster::extract(x, y)
a <- melt(ext)
colnames(a) <- c("id", "time","value")
}
#Tests ===================================================================================
#Points test
df_point = time_point(ndvi, point)
View(df_point)
#Extract point temporal data (x is raster, y is point file)
time_point = function(x,y){
ext <- raster::extract(x, y)
a <- melt(ext)
#colnames(a) <- c("id", "time","value")
}
View(df_point)
#Tests ===================================================================================
#Points test
df_point = time_point(ndvi, point)
View(df_point)
time_point = function(x,y){
ext <- raster::extract(x, y)
ext <- melt(ext)
ext <- as.data.frame(ext)
colnames(ext) <- c("id", "time","value")
}
#Tests ===================================================================================
#Points test
df_point = time_point(ndvi, point)
View(df_point)
#Functions =============================================================================
#Extract point temporal data (x is raster, y is point file)
time_point = function(x,y){
ext <- raster::extract(x, y)
ext <- melt(ext)
ext <- as.data.frame(ext)
#colnames(ext) <- c("id", "time","value")
}
#Tests ===================================================================================
#Points test
df_point = time_point(ndvi, point)
View(df_point)
barplot(df_point)
plot(df_point)
#Functions =============================================================================
#Extract point temporal data (x is raster, y is point file)
time_point = function(x,y){
ext <- raster::extract(x, y)
ext <- melt(ext)
ext <- as.data.frame(ext)
ext <- ext[,c(-1)]
colnames(ext) <- c("id", "time","value")
}
#Tests ===================================================================================
#Points test
df_point = time_point(ndvi, point)
#Functions =============================================================================
#Extract point temporal data (x is raster, y is point file)
time_point = function(x,y){
ext <- raster::extract(x, y)
ext <- melt(ext)
ext <- as.data.frame(ext)
}
#Tests ===================================================================================
#Points test
df_point = time_point(ndvi, point)
View(df_point)
#Tests ===================================================================================
#Points test
df_point = time_point(ndvi, points)
View(df_point)
df_point = function(x,y){
ext <- raster::extract(x, y)
ext <- melt(ext)
ext <- as.data.frame(ext)
}
#Tests ===================================================================================
#Points test
time_point = df_point(ndvi, point)
View(time_point)
#Extract points temporal data (x is raster, y is point file)
df_points = function(x,y){
ext <- raster::extract(x, y)
ext <- melt(ext)
ext <- as.data.frame(ext)
ext_md = ext %>%
group_by(Var2, Var1) %>%
summarise(value = median(value))
}
time_points = df_points(ndvi, points)
View(time_points)
#Extract points temporal data (x is raster, y is point file)
df_points = function(x,y){
ext <- raster::extract(x, y)
ext <- melt(ext)
ext <- as.data.frame(ext)
ext_md = ext %>%
group_by(Var2) %>%
summarise(value = median(value))
}
time_points = df_points(ndvi, points)
View(time_points)
