###############################################
#          TEMPORAL SERIES PACKAGE            #
#          => A Temporal scale <==            #
# By: Eduardo Q Marques   10-02-2020          #
###############################################
#This script is for construction and test my oun package to work with temporal series and satelitte images
#Packages requiries ====================================================================
library(raster)
library(rgdal)
library(ggplot2)
library(reshape2)
library(dplyr)
library(tidyr)
library(viridis)
#Functions =============================================================================
#Extract point temporal data (x is raster, y is point file)
df_point = function(x,y){
ext <- raster::extract(x, y)
ext <- melt(ext)
ext <- as.data.frame(ext)
}
#Extract points temporal data (x is raster, y is point file)
df_points = function(x,y){
ext <- raster::extract(x, y)
ext <- melt(ext)
ext <- as.data.frame(ext)
ext_md = ext %>%
group_by(Var2) %>%
summarise(value = median(value))
}
###############################################
#       TEMPORAL SERIES PACKAGE (Tests)       #
#          => A Temporal scale <==            #
# By: Eduardo Q Marques   12-02-2020          #
###############################################
#This script is for construction and test my oun package to work with temporal series and satelitte images
library(raster)
library(rgdal)
#Data bank to test======================================================================
ndvi <- stack(list.files(path="C:/Users/Eduardo Q Marques/Documents/My Jobs/Programas/R/Science-Repository/Temporal series package/NDVI", pattern = ".tif$", full.names=TRUE,recursive=TRUE))
#Polygon to get values
polygons <-readOGR(dsn = "C:/Users/Eduardo Q Marques/Documents/My Jobs/Programas/R/Science-Repository/Temporal series package",layer="polygons")
polygon <-readOGR(dsn = "C:/Users/Eduardo Q Marques/Documents/My Jobs/Programas/R/Science-Repository/Temporal series package",layer="polygon")
points <-readOGR(dsn = "C:/Users/Eduardo Q Marques/Documents/My Jobs/Programas/R/Science-Repository/Temporal series package",layer="points")
point <-readOGR(dsn = "C:/Users/Eduardo Q Marques/Documents/My Jobs/Programas/R/Science-Repository/Temporal series package",layer="point")
lines <-readOGR(dsn = "C:/Users/Eduardo Q Marques/Documents/My Jobs/Programas/R/Science-Repository/Temporal series package",layer="lines")
line <-readOGR(dsn = "C:/Users/Eduardo Q Marques/Documents/My Jobs/Programas/R/Science-Repository/Temporal series package",layer="line")
polygons = spTransform(polygons, crs(ndvi))
polygon = spTransform(polygon, crs(ndvi))
points = spTransform(points, crs(ndvi))
point = spTransform(point, crs(ndvi))
lines = spTransform(lines, crs(ndvi))
line = spTransform(line, crs(ndvi))
#Tests ===================================================================================
#Points test
time_point = df_point(ndvi, point)
View(time_point)
time_points = df_points(ndvi, points)
View(time_points)
plot(ndvi)
df_points = function(x,y,z){
ext <- raster::extract(x, y)
ext <- melt(ext)
ext <- as.data.frame(ext)
if (z = "median") {
ext_md = ext %>%
group_by(Var2) %>%
summarise(value = median(value))
} else if (z = "mean") {
ext_md = ext %>%
group_by(Var2) %>%
summarise(value = mean(value))
} else
print("Choose a method to calculate")
}
df_points = function(x,y,z){
ext <- raster::extract(x, y)
ext <- melt(ext)
ext <- as.data.frame(ext)
if (z = "median") {
ext_md = ext %>%
group_by(Var2) %>%
summarise(value = median(value))
} else if (z = "mean") {
ext_md = ext %>%
group_by(Var2) %>%
summarise(value = mean(value))
} else
print("Choose a method to calculate")
}
df_points = function(x,y,z){
ext <- raster::extract(x, y)
ext <- melt(ext)
ext <- as.data.frame(ext)
if (z == "median") {
ext_md = ext %>%
group_by(Var2) %>%
summarise(value = median(value))
} else if (z == "mean") {
ext_md = ext %>%
group_by(Var2) %>%
summarise(value = mean(value))
} else
print("Choose a method to calculate")
}
time_points = df_points(ndvi, points)
time_points = df_points(ndvi, points, banana)
time_points = df_points(ndvi, points, median)
df_points = function(x,y,method){
ext <- raster::extract(x, y)
ext <- melt(ext)
ext <- as.data.frame(ext)
z = method
if (z == "median") {
ext_md = ext %>%
group_by(Var2) %>%
summarise(value = median(value))
} else if (z == "mean") {
ext_md = ext %>%
group_by(Var2) %>%
summarise(value = mean(value))
} else
print("Choose a method to calculate")
}
time_points = df_points(ndvi, points, medthod = "median")
time_points = df_points(ndvi, points, "median")
View(time_points)
df_points = function(x,y,z){
ext <- raster::extract(x, y)
ext <- melt(ext)
ext <- as.data.frame(ext)
if (z == "median") {
ext_md = ext %>%
group_by(Var2) %>%
summarise(value = median(value))
} else if (z == "mean") {
ext_md = ext %>%
group_by(Var2) %>%
summarise(value = mean(value))
} else
print("Choose a method to calculate")
}
time_points = df_points(ndvi, points, "media")
View(time_points)
time_points = df_points(ndvi, points, "median")
View(time_points)
time_points2 = df_points(ndvi, points, "mean")
View(time_points2)
summarise(ndvi)
summarise(ndvi[[10]])
summarise(time_point)
summarise(time_points)
summarise(time_points2)
summary(time_points2)
time_points = df_points(ndvi, points, "mean")
time_points
time_points = df_points(ndvi, points, "median")
time_points
time_points = df_points(ndvi, points, "max")
time_points
time_points = df_points(ndvi, points, "min")
df_points = function(x,y,z){
ext <- raster::extract(x, y)
ext <- melt(ext)
ext <- as.data.frame(ext)
if (z == "median") {
ext_md = ext %>%
group_by(Var2) %>%
summarise(value = median(value))
} else if (z == "mean") {
ext_md = ext %>%
group_by(Var2) %>%
summarise(value = mean(value))
} else if(z == "max"){
ext_md = ext %>%
group_by(Var2) %>%
summarise(value = max(value))
} else if(z == "min"){
ext_md = ext %>%
group_by(Var2) %>%
summarise(value = min(value))
}else if(z == "sd"){
ext_md = ext %>%
group_by(Var2) %>%
summarise(value = sd(value))
}else
print("Use a valid method to calculate!")
}
time_points = df_points(ndvi, points, "min")
time_points
time_points = df_points(ndvi, points, "max")
time_points
time_points = df_points(ndvi, points, "ds")
time_points
time_points = df_points(ndvi, points, "sd")
time_points
time_points = df_points(ndvi, points, "mean")
time_points
time_points = df_points(ndvi, points, "median")
time_points
###############################################
#          TEMPORAL SERIES PACKAGE            #
#          => A Temporal scale <==            #
# By: Eduardo Q Marques   10-02-2020          #
###############################################
#This script is for construction and test my oun package to work with temporal series and satelitte images
#Packages requiries ====================================================================
library(raster)
library(rgdal)
library(ggplot2)
library(reshape2)
library(dplyr)
library(tidyr)
library(viridis)
#Functions
# With Points Vectors ==================================================================
#Extract point temporal data (x is raster, y is point file)
df_point = function(x,y){
ext <- raster::extract(x, y)
ext <- melt(ext)
ext <- as.data.frame(ext)
}
#Extract points temporal data (x is raster, y is point file, z is method)
df_points = function(x,y,z){
ext <- raster::extract(x, y)
ext <- melt(ext)
ext <- as.data.frame(ext)
if (z == "median") {
ext_md = ext %>%
group_by(Var2) %>%
summarise(value = median(value))
} else if (z == "mean") {
ext_md = ext %>%
group_by(Var2) %>%
summarise(value = mean(value))
} else if(z == "max"){
ext_md = ext %>%
group_by(Var2) %>%
summarise(value = max(value))
} else if(z == "min"){
ext_md = ext %>%
group_by(Var2) %>%
summarise(value = min(value))
}else if(z == "sd"){
ext_md = ext %>%
group_by(Var2) %>%
summarise(value = sd(value))
}else
print("Use a valid method to calculate!")
}
#Tests ===================================================================================
#Points test
time_point = df_point(ndvi, point)
time_point
ggplot(time_point, aes(value, Var2))+
geom_line()
ggplot(time_point, aes(Var2, value))+
geom_line()
ggplot(time_point, aes(Var2, value))+
geom_line()+
labs(x="Time",y="Value")+
theme_minimal()
ggplot(time_point, aes(Var2, value))+
geom_line()+
labs(x="Time",y="Value")+
theme_minimal()+
theme(axis.text.x = element_text(angle = 90))
geom_line(aes(group = Var2)+
ggplot(time_point, aes(Var2, value))+
geom_line(aes(group = Var2))+
labs(x="Time",y="Value")+
theme_minimal()+
theme(axis.text.x = element_text(angle = 90))
ggplot(time_point, aes(Var2, value))+
geom_line(aes(group = Var2))+
labs(x="Time",y="Value")+
theme_minimal()+
theme(axis.text.x = element_text(angle = 90))
ggplot(time_point, aes(Var2, value))+
geom_line(aes(group = Var2))+
labs(x="Time",y="Value")+
theme_minimal()+
theme(axis.text.x = element_text(angle = 90))
ggplot(time_point, aes(Var2, value))+
geom_line(aes(group = 1))+
labs(x="Time",y="Value")+
theme_minimal()+
theme(axis.text.x = element_text(angle = 90))
ggplot(time_point, aes(Var2, value))+
geom_line(aes(group = 1), color = "blue")+
labs(x="Time",y="Value")+
theme_minimal()+
theme(axis.text.x = element_text(angle = 90))
#Extract point temporal data and plot(x is raster, y is point file)
gg_point = function(x,y){
ext <- raster::extract(x, y)
ext <- melt(ext)
ext <- as.data.frame(ext)
ggplot(time_point, aes(Var2, value))+
geom_line(aes(group = 1), color = "blue", size = 1)+
labs(x="Time",y="Value")+
theme_minimal()+
theme(axis.text.x = element_text(angle = 90))
}
#Plots
gg_point(ndvi, point)
#Plots
gg_point(ndvi, points)
#Plots
gg_point(ndvi, point)
